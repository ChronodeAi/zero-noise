"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/parse5-parser-stream";
exports.ids = ["vendor-chunks/parse5-parser-stream"];
exports.modules = {

/***/ "(rsc)/./node_modules/parse5-parser-stream/dist/cjs/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/parse5-parser-stream/dist/cjs/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ParserStream = void 0;\nconst node_stream_1 = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst parse5_1 = __webpack_require__(/*! parse5 */ \"(rsc)/./node_modules/parse5/dist/cjs/index.js\");\n/* eslint-disable unicorn/consistent-function-scoping -- The rule seems to be broken here. */\n/**\n * Streaming HTML parser with scripting support.\n * A [writable stream](https://nodejs.org/api/stream.html#stream_class_stream_writable).\n *\n * @example\n *\n * ```js\n * const ParserStream = require('parse5-parser-stream');\n * const http = require('http');\n * const { finished } = require('node:stream');\n *\n * // Fetch the page content and obtain it's <head> node\n * http.get('http://inikulin.github.io/parse5/', res => {\n *     const parser = new ParserStream();\n *\n *     finished(parser, () => {\n *         console.log(parser.document.childNodes[1].childNodes[0].tagName); //> 'head'\n *     });\n *\n *     res.pipe(parser);\n * });\n * ```\n *\n */\nclass ParserStream extends node_stream_1.Writable {\n    static getFragmentStream(fragmentContext, options) {\n        const parser = parse5_1.Parser.getFragmentParser(fragmentContext, options);\n        const stream = new ParserStream(options, parser);\n        return stream;\n    }\n    /** The resulting document node. */\n    get document() {\n        return this.parser.document;\n    }\n    getFragment() {\n        return this.parser.getFragment();\n    }\n    /**\n     * @param options Parsing options.\n     */\n    constructor(options, parser = new parse5_1.Parser(options)) {\n        super({ decodeStrings: false });\n        this.parser = parser;\n        this.lastChunkWritten = false;\n        this.writeCallback = undefined;\n        this.pendingHtmlInsertions = [];\n        const resume = () => {\n            for (let i = this.pendingHtmlInsertions.length - 1; i >= 0; i--) {\n                this.parser.tokenizer.insertHtmlAtCurrentPos(this.pendingHtmlInsertions[i]);\n            }\n            this.pendingHtmlInsertions.length = 0;\n            //NOTE: keep parsing if we don't wait for the next input chunk\n            this.parser.tokenizer.resume(this.writeCallback);\n        };\n        const documentWrite = (html) => {\n            if (!this.parser.stopped) {\n                this.pendingHtmlInsertions.push(html);\n            }\n        };\n        const scriptHandler = (scriptElement) => {\n            if (this.listenerCount('script') > 0) {\n                this.parser.tokenizer.pause();\n                this.emit('script', scriptElement, documentWrite, resume);\n            }\n        };\n        this.parser.scriptHandler = scriptHandler;\n    }\n    //WritableStream implementation\n    _write(chunk, _encoding, callback) {\n        if (typeof chunk !== 'string') {\n            throw new TypeError('Parser can work only with string streams.');\n        }\n        this.writeCallback = callback;\n        this.parser.tokenizer.write(chunk, this.lastChunkWritten, this.writeCallback);\n    }\n    // TODO [engine:node@>=16]: Due to issues with Node < 16, we are overriding `end` instead of `_final`.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    end(chunk, encoding, callback) {\n        this.lastChunkWritten = true;\n        super.end(chunk || '', encoding, callback);\n    }\n}\nexports.ParserStream = ParserStream;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGFyc2U1LXBhcnNlci1zdHJlYW0vZGlzdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLHNCQUFzQixtQkFBTyxDQUFDLGdDQUFhO0FBQzNDLGlCQUFpQixtQkFBTyxDQUFDLDZEQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RTtBQUM3RSxRQUFRO0FBQ1I7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHNCQUFzQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLFFBQVE7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jaHJvbm9kZS9Eb2N1bWVudHMvemVyby1ub2lzZS9ub2RlX21vZHVsZXMvcGFyc2U1LXBhcnNlci1zdHJlYW0vZGlzdC9janMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBhcnNlclN0cmVhbSA9IHZvaWQgMDtcbmNvbnN0IG5vZGVfc3RyZWFtXzEgPSByZXF1aXJlKFwibm9kZTpzdHJlYW1cIik7XG5jb25zdCBwYXJzZTVfMSA9IHJlcXVpcmUoXCJwYXJzZTVcIik7XG4vKiBlc2xpbnQtZGlzYWJsZSB1bmljb3JuL2NvbnNpc3RlbnQtZnVuY3Rpb24tc2NvcGluZyAtLSBUaGUgcnVsZSBzZWVtcyB0byBiZSBicm9rZW4gaGVyZS4gKi9cbi8qKlxuICogU3RyZWFtaW5nIEhUTUwgcGFyc2VyIHdpdGggc2NyaXB0aW5nIHN1cHBvcnQuXG4gKiBBIFt3cml0YWJsZSBzdHJlYW1dKGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvc3RyZWFtLmh0bWwjc3RyZWFtX2NsYXNzX3N0cmVhbV93cml0YWJsZSkuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgUGFyc2VyU3RyZWFtID0gcmVxdWlyZSgncGFyc2U1LXBhcnNlci1zdHJlYW0nKTtcbiAqIGNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG4gKiBjb25zdCB7IGZpbmlzaGVkIH0gPSByZXF1aXJlKCdub2RlOnN0cmVhbScpO1xuICpcbiAqIC8vIEZldGNoIHRoZSBwYWdlIGNvbnRlbnQgYW5kIG9idGFpbiBpdCdzIDxoZWFkPiBub2RlXG4gKiBodHRwLmdldCgnaHR0cDovL2luaWt1bGluLmdpdGh1Yi5pby9wYXJzZTUvJywgcmVzID0+IHtcbiAqICAgICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyU3RyZWFtKCk7XG4gKlxuICogICAgIGZpbmlzaGVkKHBhcnNlciwgKCkgPT4ge1xuICogICAgICAgICBjb25zb2xlLmxvZyhwYXJzZXIuZG9jdW1lbnQuY2hpbGROb2Rlc1sxXS5jaGlsZE5vZGVzWzBdLnRhZ05hbWUpOyAvLz4gJ2hlYWQnXG4gKiAgICAgfSk7XG4gKlxuICogICAgIHJlcy5waXBlKHBhcnNlcik7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqL1xuY2xhc3MgUGFyc2VyU3RyZWFtIGV4dGVuZHMgbm9kZV9zdHJlYW1fMS5Xcml0YWJsZSB7XG4gICAgc3RhdGljIGdldEZyYWdtZW50U3RyZWFtKGZyYWdtZW50Q29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBwYXJzZTVfMS5QYXJzZXIuZ2V0RnJhZ21lbnRQYXJzZXIoZnJhZ21lbnRDb250ZXh0LCBvcHRpb25zKTtcbiAgICAgICAgY29uc3Qgc3RyZWFtID0gbmV3IFBhcnNlclN0cmVhbShvcHRpb25zLCBwYXJzZXIpO1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH1cbiAgICAvKiogVGhlIHJlc3VsdGluZyBkb2N1bWVudCBub2RlLiAqL1xuICAgIGdldCBkb2N1bWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VyLmRvY3VtZW50O1xuICAgIH1cbiAgICBnZXRGcmFnbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VyLmdldEZyYWdtZW50KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFBhcnNpbmcgb3B0aW9ucy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBwYXJzZXIgPSBuZXcgcGFyc2U1XzEuUGFyc2VyKG9wdGlvbnMpKSB7XG4gICAgICAgIHN1cGVyKHsgZGVjb2RlU3RyaW5nczogZmFsc2UgfSk7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgICAgICB0aGlzLmxhc3RDaHVua1dyaXR0ZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy53cml0ZUNhbGxiYWNrID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnBlbmRpbmdIdG1sSW5zZXJ0aW9ucyA9IFtdO1xuICAgICAgICBjb25zdCByZXN1bWUgPSAoKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5wZW5kaW5nSHRtbEluc2VydGlvbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlci50b2tlbml6ZXIuaW5zZXJ0SHRtbEF0Q3VycmVudFBvcyh0aGlzLnBlbmRpbmdIdG1sSW5zZXJ0aW9uc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdIdG1sSW5zZXJ0aW9ucy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgLy9OT1RFOiBrZWVwIHBhcnNpbmcgaWYgd2UgZG9uJ3Qgd2FpdCBmb3IgdGhlIG5leHQgaW5wdXQgY2h1bmtcbiAgICAgICAgICAgIHRoaXMucGFyc2VyLnRva2VuaXplci5yZXN1bWUodGhpcy53cml0ZUNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZG9jdW1lbnRXcml0ZSA9IChodG1sKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucGFyc2VyLnN0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdIdG1sSW5zZXJ0aW9ucy5wdXNoKGh0bWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzY3JpcHRIYW5kbGVyID0gKHNjcmlwdEVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxpc3RlbmVyQ291bnQoJ3NjcmlwdCcpID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyc2VyLnRva2VuaXplci5wYXVzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnc2NyaXB0Jywgc2NyaXB0RWxlbWVudCwgZG9jdW1lbnRXcml0ZSwgcmVzdW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wYXJzZXIuc2NyaXB0SGFuZGxlciA9IHNjcmlwdEhhbmRsZXI7XG4gICAgfVxuICAgIC8vV3JpdGFibGVTdHJlYW0gaW1wbGVtZW50YXRpb25cbiAgICBfd3JpdGUoY2h1bmssIF9lbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BhcnNlciBjYW4gd29yayBvbmx5IHdpdGggc3RyaW5nIHN0cmVhbXMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53cml0ZUNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHRoaXMucGFyc2VyLnRva2VuaXplci53cml0ZShjaHVuaywgdGhpcy5sYXN0Q2h1bmtXcml0dGVuLCB0aGlzLndyaXRlQ2FsbGJhY2spO1xuICAgIH1cbiAgICAvLyBUT0RPIFtlbmdpbmU6bm9kZUA+PTE2XTogRHVlIHRvIGlzc3VlcyB3aXRoIE5vZGUgPCAxNiwgd2UgYXJlIG92ZXJyaWRpbmcgYGVuZGAgaW5zdGVhZCBvZiBgX2ZpbmFsYC5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGVuZChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMubGFzdENodW5rV3JpdHRlbiA9IHRydWU7XG4gICAgICAgIHN1cGVyLmVuZChjaHVuayB8fCAnJywgZW5jb2RpbmcsIGNhbGxiYWNrKTtcbiAgICB9XG59XG5leHBvcnRzLlBhcnNlclN0cmVhbSA9IFBhcnNlclN0cmVhbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/parse5-parser-stream/dist/cjs/index.js\n");

/***/ })

};
;
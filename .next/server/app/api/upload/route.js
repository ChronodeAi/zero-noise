/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/upload/route";
exports.ids = ["app/api/upload/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fupload%2Froute&page=%2Fapi%2Fupload%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload%2Froute.ts&appDir=%2FUsers%2Fchronode%2FDocuments%2Fzero-noise%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fchronode%2FDocuments%2Fzero-noise&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fupload%2Froute&page=%2Fapi%2Fupload%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload%2Froute.ts&appDir=%2FUsers%2Fchronode%2FDocuments%2Fzero-noise%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fchronode%2FDocuments%2Fzero-noise&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_chronode_Documents_zero_noise_src_app_api_upload_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/upload/route.ts */ \"(rsc)/./src/app/api/upload/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/upload/route\",\n        pathname: \"/api/upload\",\n        filename: \"route\",\n        bundlePath: \"app/api/upload/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"/Users/chronode/Documents/zero-noise/src/app/api/upload/route.ts\",\n    nextConfigOutput,\n    userland: _Users_chronode_Documents_zero_noise_src_app_api_upload_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/upload/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fupload%2Froute&page=%2Fapi%2Fupload%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload%2Froute.ts&appDir=%2FUsers%2Fchronode%2FDocuments%2Fzero-noise%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fchronode%2FDocuments%2Fzero-noise&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./node_modules/pdf-parse/dist/pdf-parse/cjs lazy recursive":
/*!**************************************************************************!*\
  !*** ./node_modules/pdf-parse/dist/pdf-parse/cjs/ lazy namespace object ***!
  \**************************************************************************/
/***/ ((module) => {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(() => {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = () => ([]);
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "(rsc)/./node_modules/pdf-parse/dist/pdf-parse/cjs lazy recursive";
module.exports = webpackEmptyAsyncContext;

/***/ }),

/***/ "(rsc)/./src/app/api/upload/route.ts":
/*!*************************************!*\
  !*** ./src/app/api/upload/route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_serverValidation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/serverValidation */ \"(rsc)/./src/lib/serverValidation.ts\");\n/* harmony import */ var _lib_filebaseClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/filebaseClient */ \"(rsc)/./src/lib/filebaseClient.ts\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _lib_urlScraper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/urlScraper */ \"(rsc)/./src/lib/urlScraper.ts\");\n/* harmony import */ var _lib_textExtraction__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/textExtraction */ \"(rsc)/./src/lib/textExtraction.ts\");\n\n\n\n\n\n\n\nconst runtime = 'nodejs';\nconst dynamic = 'force-dynamic';\n/**\n * POST /api/upload\n * Upload files with server-side validation and Filebase IPFS upload\n * \n * Story 3: Server-side validation ✅\n * Story 4: Filebase IPFS integration ✅\n */ async function POST(request) {\n    try {\n        const formData = await request.formData();\n        const files = formData.getAll('file');\n        const urlsString = formData.get('urls');\n        // Parse URLs if provided\n        const urls = urlsString ? urlsString.split('\\n').filter(Boolean).map((u)=>u.trim()) : [];\n        if ((!files || files.length === 0) && urls.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'No files or URLs provided'\n            }, {\n                status: 400\n            });\n        }\n        // Generate collection ID for this upload session\n        const collectionId = (0,crypto__WEBPACK_IMPORTED_MODULE_4__.randomUUID)();\n        // Validate and process each file\n        const results = await Promise.all(files.map(async (file)=>{\n            try {\n                // Convert File to Buffer\n                const arrayBuffer = await file.arrayBuffer();\n                const buffer = Buffer.from(arrayBuffer);\n                // Server-side validation\n                const validation = (0,_lib_serverValidation__WEBPACK_IMPORTED_MODULE_1__.validateUploadedFile)(buffer, file.type, file.name);\n                if (!validation.valid) {\n                    return {\n                        filename: file.name,\n                        success: false,\n                        error: validation.error,\n                        errorCode: validation.errorCode\n                    };\n                }\n                // Sanitize filename\n                const safeFilename = (0,_lib_serverValidation__WEBPACK_IMPORTED_MODULE_1__.sanitizeFilename)(file.name);\n                // Story 4: Upload to Filebase IPFS\n                const uploadResult = await (0,_lib_filebaseClient__WEBPACK_IMPORTED_MODULE_2__.uploadToFilebase)(buffer, safeFilename);\n                if (!uploadResult.success) {\n                    return {\n                        filename: file.name,\n                        success: false,\n                        error: `Filebase upload failed: ${uploadResult.error}`,\n                        errorCode: 'UPLOAD_FAILED'\n                    };\n                }\n                // Extract text content for search indexing\n                let textContent = null;\n                try {\n                    const extracted = await (0,_lib_textExtraction__WEBPACK_IMPORTED_MODULE_6__.extractTextFromFile)(buffer, file.type);\n                    if (extracted) {\n                        textContent = (0,_lib_textExtraction__WEBPACK_IMPORTED_MODULE_6__.cleanTextForEmbedding)(extracted);\n                    }\n                } catch (error) {\n                    console.error('Text extraction failed:', error);\n                // Non-critical, continue without text content\n                }\n                // Success! File uploaded to IPFS\n                return {\n                    filename: file.name,\n                    sanitizedFilename: safeFilename,\n                    success: true,\n                    size: buffer.length,\n                    type: file.type,\n                    cid: uploadResult.cid,\n                    duration: uploadResult.duration,\n                    gatewayUrl: (0,_lib_filebaseClient__WEBPACK_IMPORTED_MODULE_2__.getFilebaseGatewayUrl)(uploadResult.cid),\n                    fallbackUrls: (0,_lib_filebaseClient__WEBPACK_IMPORTED_MODULE_2__.getPublicGatewayUrls)(uploadResult.cid),\n                    message: 'Successfully uploaded to Filebase IPFS',\n                    collectionId,\n                    textContent\n                };\n            } catch (error) {\n                return {\n                    filename: file.name,\n                    success: false,\n                    error: error instanceof Error ? error.message : 'Processing failed',\n                    errorCode: 'VALIDATION_ERROR'\n                };\n            }\n        }));\n        // Check if any files failed\n        const failures = results.filter((r)=>!r.success);\n        const successes = results.filter((r)=>r.success);\n        if (failures.length > 0 && successes.length === 0) {\n            // All files failed\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'All files failed validation',\n                results\n            }, {\n                status: 400\n            });\n        }\n        // Scrape URL metadata if URLs provided\n        let urlMetadata = [];\n        if (urls.length > 0) {\n            try {\n                urlMetadata = await (0,_lib_urlScraper__WEBPACK_IMPORTED_MODULE_5__.scrapeUrls)(urls);\n            } catch (error) {\n                console.error('URL scraping error:', error);\n            }\n        }\n        // Story 2: Save metadata to database\n        if (successes.length > 0 || urlMetadata.length > 0) {\n            try {\n                // Create collection with files and links\n                await _lib_prisma__WEBPACK_IMPORTED_MODULE_3__.prisma.collection.create({\n                    data: {\n                        id: collectionId,\n                        files: {\n                            create: successes.filter((file)=>file.cid && file.size && file.type).map((file)=>({\n                                    cid: file.cid,\n                                    filename: file.sanitizedFilename || file.filename,\n                                    size: file.size,\n                                    mimeType: file.type,\n                                    textContent: file.textContent,\n                                    indexed: !!file.textContent,\n                                    indexedAt: file.textContent ? new Date() : null\n                                }))\n                        },\n                        links: {\n                            create: urlMetadata.map((meta)=>({\n                                    url: meta.url,\n                                    title: meta.title,\n                                    description: meta.description,\n                                    imageUrl: meta.imageUrl,\n                                    siteName: meta.siteName,\n                                    linkType: meta.linkType\n                                }))\n                        }\n                    }\n                });\n            } catch (dbError) {\n                console.error('Database save error:', dbError);\n            // Don't fail the upload if DB save fails, just log it\n            // Files are already in IPFS\n            }\n        }\n        // Return results (partial or full success)\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: `${successes.length} file(s) and ${urlMetadata.length} URL(s) processed successfully`,\n            collectionId,\n            results,\n            urls: urlMetadata\n        });\n    } catch (error) {\n        console.error('Upload API error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Upload failed',\n            message: error instanceof Error ? error.message : 'Unknown error'\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * GET /api/upload\n * API health check\n */ async function GET() {\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        status: 'ok',\n        message: 'Upload API ready',\n        maxFileSize: '100MB',\n        allowedTypes: [\n            'PDF',\n            'Images',\n            'Videos',\n            'Text',\n            'CSV'\n        ]\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/upload/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/filebaseClient.ts":
/*!***********************************!*\
  !*** ./src/lib/filebaseClient.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkFilebaseHealth: () => (/* binding */ checkFilebaseHealth),\n/* harmony export */   getFilebaseGatewayUrl: () => (/* binding */ getFilebaseGatewayUrl),\n/* harmony export */   getPublicGatewayUrls: () => (/* binding */ getPublicGatewayUrls),\n/* harmony export */   uploadMultipleToFilebase: () => (/* binding */ uploadMultipleToFilebase),\n/* harmony export */   uploadToFilebase: () => (/* binding */ uploadToFilebase)\n/* harmony export */ });\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! form-data */ \"(rsc)/./node_modules/form-data/lib/form_data.js\");\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(form_data__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/**\n * Filebase IPFS Client\n * Uploads files to IPFS via Filebase RPC API\n */ \n\nconst RPC_ENDPOINT = process.env.FILEBASE_IPFS_RPC_ENDPOINT || 'https://rpc.filebase.io';\nconst RPC_KEY = process.env.FILEBASE_IPFS_RPC_KEY;\nif (!RPC_KEY) {\n    console.error('⚠️  FILEBASE_IPFS_RPC_KEY not set');\n}\n/**\n * Upload file to Filebase IPFS via RPC API\n */ async function uploadToFilebase(buffer, filename) {\n    const startTime = Date.now();\n    try {\n        if (!RPC_KEY) {\n            throw new Error('Filebase API key not configured');\n        }\n        // Create form data\n        const form = new (form_data__WEBPACK_IMPORTED_MODULE_0___default())();\n        form.append('file', buffer, filename);\n        // Upload to Filebase IPFS RPC\n        const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(`${RPC_ENDPOINT}/api/v0/add`, form, {\n            headers: {\n                'Authorization': `Bearer ${RPC_KEY}`,\n                ...form.getHeaders()\n            },\n            maxBodyLength: Infinity,\n            timeout: 30000\n        });\n        const duration = Date.now() - startTime;\n        const cid = response.data.Hash;\n        const size = parseInt(response.data.Size) || buffer.length;\n        return {\n            success: true,\n            cid,\n            name: response.data.Name || filename,\n            size,\n            duration\n        };\n    } catch (error) {\n        const duration = Date.now() - startTime;\n        if (axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(error)) {\n            return {\n                success: false,\n                error: error.response?.data?.error || error.message,\n                duration\n            };\n        }\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : 'Upload failed',\n            duration\n        };\n    }\n}\n/**\n * Upload multiple files to Filebase IPFS\n */ async function uploadMultipleToFilebase(files) {\n    return Promise.all(files.map(({ buffer, filename })=>uploadToFilebase(buffer, filename)));\n}\n/**\n * Get Filebase gateway URL for CID\n */ function getFilebaseGatewayUrl(cid) {\n    // Using Filebase dedicated gateway (from spike validation)\n    return `https://ipfs.filebase.io/ipfs/${cid}`;\n}\n/**\n * Get public IPFS gateway URLs for fallback\n */ function getPublicGatewayUrls(cid) {\n    return [\n        `https://ipfs.io/ipfs/${cid}`,\n        `https://dweb.link/ipfs/${cid}`,\n        `https://cloudflare-ipfs.com/ipfs/${cid}`,\n        getFilebaseGatewayUrl(cid)\n    ];\n}\n/**\n * Health check - verify Filebase API is accessible\n */ async function checkFilebaseHealth() {\n    try {\n        if (!RPC_KEY) return false;\n        const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(`${RPC_ENDPOINT}/api/v0/version`, null, {\n            headers: {\n                'Authorization': `Bearer ${RPC_KEY}`\n            },\n            timeout: 5000\n        });\n        return response.status === 200;\n    } catch  {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2ZpbGViYXNlQ2xpZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBRStCO0FBQ1A7QUFFekIsTUFBTUUsZUFBZUMsUUFBUUMsR0FBRyxDQUFDQywwQkFBMEIsSUFBSTtBQUMvRCxNQUFNQyxVQUFVSCxRQUFRQyxHQUFHLENBQUNHLHFCQUFxQjtBQUVqRCxJQUFJLENBQUNELFNBQVM7SUFDWkUsUUFBUUMsS0FBSyxDQUFDO0FBQ2hCO0FBV0E7O0NBRUMsR0FDTSxlQUFlQyxpQkFDcEJDLE1BQWMsRUFDZEMsUUFBZ0I7SUFFaEIsTUFBTUMsWUFBWUMsS0FBS0MsR0FBRztJQUUxQixJQUFJO1FBQ0YsSUFBSSxDQUFDVCxTQUFTO1lBQ1osTUFBTSxJQUFJVSxNQUFNO1FBQ2xCO1FBRUEsbUJBQW1CO1FBQ25CLE1BQU1DLE9BQU8sSUFBSWpCLGtEQUFRQTtRQUN6QmlCLEtBQUtDLE1BQU0sQ0FBQyxRQUFRUCxRQUFRQztRQUU1Qiw4QkFBOEI7UUFDOUIsTUFBTU8sV0FBVyxNQUFNbEIsNkNBQUtBLENBQUNtQixJQUFJLENBQy9CLEdBQUdsQixhQUFhLFdBQVcsQ0FBQyxFQUM1QmUsTUFDQTtZQUNFSSxTQUFTO2dCQUNQLGlCQUFpQixDQUFDLE9BQU8sRUFBRWYsU0FBUztnQkFDcEMsR0FBR1csS0FBS0ssVUFBVSxFQUFFO1lBQ3RCO1lBQ0FDLGVBQWVDO1lBQ2ZDLFNBQVM7UUFDWDtRQUdGLE1BQU1DLFdBQVdaLEtBQUtDLEdBQUcsS0FBS0Y7UUFDOUIsTUFBTWMsTUFBTVIsU0FBU1MsSUFBSSxDQUFDQyxJQUFJO1FBQzlCLE1BQU1DLE9BQU9DLFNBQVNaLFNBQVNTLElBQUksQ0FBQ0ksSUFBSSxLQUFLckIsT0FBT3NCLE1BQU07UUFFMUQsT0FBTztZQUNMQyxTQUFTO1lBQ1RQO1lBQ0FRLE1BQU1oQixTQUFTUyxJQUFJLENBQUNRLElBQUksSUFBSXhCO1lBQzVCa0I7WUFDQUo7UUFDRjtJQUNGLEVBQUUsT0FBT2pCLE9BQU87UUFDZCxNQUFNaUIsV0FBV1osS0FBS0MsR0FBRyxLQUFLRjtRQUU5QixJQUFJWiw2Q0FBS0EsQ0FBQ29DLFlBQVksQ0FBQzVCLFFBQVE7WUFDN0IsT0FBTztnQkFDTHlCLFNBQVM7Z0JBQ1R6QixPQUFPQSxNQUFNVSxRQUFRLEVBQUVTLE1BQU1uQixTQUFTQSxNQUFNNkIsT0FBTztnQkFDbkRaO1lBQ0Y7UUFDRjtRQUVBLE9BQU87WUFDTFEsU0FBUztZQUNUekIsT0FBT0EsaUJBQWlCTyxRQUFRUCxNQUFNNkIsT0FBTyxHQUFHO1lBQ2hEWjtRQUNGO0lBQ0Y7QUFDRjtBQUVBOztDQUVDLEdBQ00sZUFBZWEseUJBQ3BCQyxLQUFrRDtJQUVsRCxPQUFPQyxRQUFRQyxHQUFHLENBQ2hCRixNQUFNRyxHQUFHLENBQUMsQ0FBQyxFQUFFaEMsTUFBTSxFQUFFQyxRQUFRLEVBQUUsR0FBS0YsaUJBQWlCQyxRQUFRQztBQUVqRTtBQUVBOztDQUVDLEdBQ00sU0FBU2dDLHNCQUFzQmpCLEdBQVc7SUFDL0MsMkRBQTJEO0lBQzNELE9BQU8sQ0FBQyw4QkFBOEIsRUFBRUEsS0FBSztBQUMvQztBQUVBOztDQUVDLEdBQ00sU0FBU2tCLHFCQUFxQmxCLEdBQVc7SUFDOUMsT0FBTztRQUNMLENBQUMscUJBQXFCLEVBQUVBLEtBQUs7UUFDN0IsQ0FBQyx1QkFBdUIsRUFBRUEsS0FBSztRQUMvQixDQUFDLGlDQUFpQyxFQUFFQSxLQUFLO1FBQ3pDaUIsc0JBQXNCakI7S0FDdkI7QUFDSDtBQUVBOztDQUVDLEdBQ00sZUFBZW1CO0lBQ3BCLElBQUk7UUFDRixJQUFJLENBQUN4QyxTQUFTLE9BQU87UUFFckIsTUFBTWEsV0FBVyxNQUFNbEIsNkNBQUtBLENBQUNtQixJQUFJLENBQy9CLEdBQUdsQixhQUFhLGVBQWUsQ0FBQyxFQUNoQyxNQUNBO1lBQ0VtQixTQUFTO2dCQUNQLGlCQUFpQixDQUFDLE9BQU8sRUFBRWYsU0FBUztZQUN0QztZQUNBbUIsU0FBUztRQUNYO1FBR0YsT0FBT04sU0FBUzRCLE1BQU0sS0FBSztJQUM3QixFQUFFLE9BQU07UUFDTixPQUFPO0lBQ1Q7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL2Nocm9ub2RlL0RvY3VtZW50cy96ZXJvLW5vaXNlL3NyYy9saWIvZmlsZWJhc2VDbGllbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBGaWxlYmFzZSBJUEZTIENsaWVudFxuICogVXBsb2FkcyBmaWxlcyB0byBJUEZTIHZpYSBGaWxlYmFzZSBSUEMgQVBJXG4gKi9cblxuaW1wb3J0IEZvcm1EYXRhIGZyb20gJ2Zvcm0tZGF0YSdcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcblxuY29uc3QgUlBDX0VORFBPSU5UID0gcHJvY2Vzcy5lbnYuRklMRUJBU0VfSVBGU19SUENfRU5EUE9JTlQgfHwgJ2h0dHBzOi8vcnBjLmZpbGViYXNlLmlvJ1xuY29uc3QgUlBDX0tFWSA9IHByb2Nlc3MuZW52LkZJTEVCQVNFX0lQRlNfUlBDX0tFWVxuXG5pZiAoIVJQQ19LRVkpIHtcbiAgY29uc29sZS5lcnJvcign4pqg77iPICBGSUxFQkFTRV9JUEZTX1JQQ19LRVkgbm90IHNldCcpXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZWJhc2VVcGxvYWRSZXN1bHQge1xuICBzdWNjZXNzOiBib29sZWFuXG4gIGNpZD86IHN0cmluZ1xuICBuYW1lPzogc3RyaW5nXG4gIHNpemU/OiBudW1iZXJcbiAgZXJyb3I/OiBzdHJpbmdcbiAgZHVyYXRpb24/OiBudW1iZXJcbn1cblxuLyoqXG4gKiBVcGxvYWQgZmlsZSB0byBGaWxlYmFzZSBJUEZTIHZpYSBSUEMgQVBJXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGxvYWRUb0ZpbGViYXNlKFxuICBidWZmZXI6IEJ1ZmZlcixcbiAgZmlsZW5hbWU6IHN0cmluZ1xuKTogUHJvbWlzZTxGaWxlYmFzZVVwbG9hZFJlc3VsdD4ge1xuICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpXG5cbiAgdHJ5IHtcbiAgICBpZiAoIVJQQ19LRVkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmlsZWJhc2UgQVBJIGtleSBub3QgY29uZmlndXJlZCcpXG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGZvcm0gZGF0YVxuICAgIGNvbnN0IGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICAgIGZvcm0uYXBwZW5kKCdmaWxlJywgYnVmZmVyLCBmaWxlbmFtZSlcblxuICAgIC8vIFVwbG9hZCB0byBGaWxlYmFzZSBJUEZTIFJQQ1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChcbiAgICAgIGAke1JQQ19FTkRQT0lOVH0vYXBpL3YwL2FkZGAsXG4gICAgICBmb3JtLFxuICAgICAge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7UlBDX0tFWX1gLFxuICAgICAgICAgIC4uLmZvcm0uZ2V0SGVhZGVycygpLFxuICAgICAgICB9LFxuICAgICAgICBtYXhCb2R5TGVuZ3RoOiBJbmZpbml0eSxcbiAgICAgICAgdGltZW91dDogMzAwMDAsIC8vIDMwcyB0aW1lb3V0XG4gICAgICB9XG4gICAgKVxuXG4gICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lXG4gICAgY29uc3QgY2lkID0gcmVzcG9uc2UuZGF0YS5IYXNoXG4gICAgY29uc3Qgc2l6ZSA9IHBhcnNlSW50KHJlc3BvbnNlLmRhdGEuU2l6ZSkgfHwgYnVmZmVyLmxlbmd0aFxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBjaWQsXG4gICAgICBuYW1lOiByZXNwb25zZS5kYXRhLk5hbWUgfHwgZmlsZW5hbWUsXG4gICAgICBzaXplLFxuICAgICAgZHVyYXRpb24sXG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZVxuXG4gICAgaWYgKGF4aW9zLmlzQXhpb3NFcnJvcihlcnJvcikpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogZXJyb3IucmVzcG9uc2U/LmRhdGE/LmVycm9yIHx8IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVcGxvYWQgZmFpbGVkJyxcbiAgICAgIGR1cmF0aW9uLFxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFVwbG9hZCBtdWx0aXBsZSBmaWxlcyB0byBGaWxlYmFzZSBJUEZTXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGxvYWRNdWx0aXBsZVRvRmlsZWJhc2UoXG4gIGZpbGVzOiBBcnJheTx7IGJ1ZmZlcjogQnVmZmVyOyBmaWxlbmFtZTogc3RyaW5nIH0+XG4pOiBQcm9taXNlPEZpbGViYXNlVXBsb2FkUmVzdWx0W10+IHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgIGZpbGVzLm1hcCgoeyBidWZmZXIsIGZpbGVuYW1lIH0pID0+IHVwbG9hZFRvRmlsZWJhc2UoYnVmZmVyLCBmaWxlbmFtZSkpXG4gIClcbn1cblxuLyoqXG4gKiBHZXQgRmlsZWJhc2UgZ2F0ZXdheSBVUkwgZm9yIENJRFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmlsZWJhc2VHYXRld2F5VXJsKGNpZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgLy8gVXNpbmcgRmlsZWJhc2UgZGVkaWNhdGVkIGdhdGV3YXkgKGZyb20gc3Bpa2UgdmFsaWRhdGlvbilcbiAgcmV0dXJuIGBodHRwczovL2lwZnMuZmlsZWJhc2UuaW8vaXBmcy8ke2NpZH1gXG59XG5cbi8qKlxuICogR2V0IHB1YmxpYyBJUEZTIGdhdGV3YXkgVVJMcyBmb3IgZmFsbGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFB1YmxpY0dhdGV3YXlVcmxzKGNpZDogc3RyaW5nKTogc3RyaW5nW10ge1xuICByZXR1cm4gW1xuICAgIGBodHRwczovL2lwZnMuaW8vaXBmcy8ke2NpZH1gLFxuICAgIGBodHRwczovL2R3ZWIubGluay9pcGZzLyR7Y2lkfWAsXG4gICAgYGh0dHBzOi8vY2xvdWRmbGFyZS1pcGZzLmNvbS9pcGZzLyR7Y2lkfWAsXG4gICAgZ2V0RmlsZWJhc2VHYXRld2F5VXJsKGNpZCksIC8vIEZpbGViYXNlIGFzIGZhbGxiYWNrXG4gIF1cbn1cblxuLyoqXG4gKiBIZWFsdGggY2hlY2sgLSB2ZXJpZnkgRmlsZWJhc2UgQVBJIGlzIGFjY2Vzc2libGVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrRmlsZWJhc2VIZWFsdGgoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIHRyeSB7XG4gICAgaWYgKCFSUENfS0VZKSByZXR1cm4gZmFsc2VcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChcbiAgICAgIGAke1JQQ19FTkRQT0lOVH0vYXBpL3YwL3ZlcnNpb25gLFxuICAgICAgbnVsbCxcbiAgICAgIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke1JQQ19LRVl9YCxcbiAgICAgICAgfSxcbiAgICAgICAgdGltZW91dDogNTAwMCxcbiAgICAgIH1cbiAgICApXG5cbiAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzID09PSAyMDBcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJGb3JtRGF0YSIsImF4aW9zIiwiUlBDX0VORFBPSU5UIiwicHJvY2VzcyIsImVudiIsIkZJTEVCQVNFX0lQRlNfUlBDX0VORFBPSU5UIiwiUlBDX0tFWSIsIkZJTEVCQVNFX0lQRlNfUlBDX0tFWSIsImNvbnNvbGUiLCJlcnJvciIsInVwbG9hZFRvRmlsZWJhc2UiLCJidWZmZXIiLCJmaWxlbmFtZSIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJFcnJvciIsImZvcm0iLCJhcHBlbmQiLCJyZXNwb25zZSIsInBvc3QiLCJoZWFkZXJzIiwiZ2V0SGVhZGVycyIsIm1heEJvZHlMZW5ndGgiLCJJbmZpbml0eSIsInRpbWVvdXQiLCJkdXJhdGlvbiIsImNpZCIsImRhdGEiLCJIYXNoIiwic2l6ZSIsInBhcnNlSW50IiwiU2l6ZSIsImxlbmd0aCIsInN1Y2Nlc3MiLCJuYW1lIiwiTmFtZSIsImlzQXhpb3NFcnJvciIsIm1lc3NhZ2UiLCJ1cGxvYWRNdWx0aXBsZVRvRmlsZWJhc2UiLCJmaWxlcyIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJnZXRGaWxlYmFzZUdhdGV3YXlVcmwiLCJnZXRQdWJsaWNHYXRld2F5VXJscyIsImNoZWNrRmlsZWJhc2VIZWFsdGgiLCJzdGF0dXMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/filebaseClient.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        'query',\n        'error',\n        'warn'\n    ] : 0\n});\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFFN0MsTUFBTUMsa0JBQWtCQztBQUlqQixNQUFNQyxTQUNYRixnQkFBZ0JFLE1BQU0sSUFDdEIsSUFBSUgsd0RBQVlBLENBQUM7SUFDZkksS0FBS0MsS0FBc0MsR0FBRztRQUFDO1FBQVM7UUFBUztLQUFPLEdBQUcsQ0FBUztBQUN0RixHQUFFO0FBRUosSUFBSUEsSUFBcUMsRUFBRUosZ0JBQWdCRSxNQUFNLEdBQUdBIiwic291cmNlcyI6WyIvVXNlcnMvY2hyb25vZGUvRG9jdW1lbnRzL3plcm8tbm9pc2Uvc3JjL2xpYi9wcmlzbWEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnXG5cbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbFRoaXMgYXMgdW5rbm93biBhcyB7XG4gIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBjb25zdCBwcmlzbWEgPVxuICBnbG9iYWxGb3JQcmlzbWEucHJpc21hID8/XG4gIG5ldyBQcmlzbWFDbGllbnQoe1xuICAgIGxvZzogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyBbJ3F1ZXJ5JywgJ2Vycm9yJywgJ3dhcm4nXSA6IFsnZXJyb3InXSxcbiAgfSlcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWFcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwicHJpc21hIiwibG9nIiwicHJvY2VzcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/serverValidation.ts":
/*!*************************************!*\
  !*** ./src/lib/serverValidation.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALLOWED_MIME_TYPES: () => (/* binding */ ALLOWED_MIME_TYPES),\n/* harmony export */   MAX_FILE_SIZE: () => (/* binding */ MAX_FILE_SIZE),\n/* harmony export */   getFileExtension: () => (/* binding */ getFileExtension),\n/* harmony export */   sanitizeFilename: () => (/* binding */ sanitizeFilename),\n/* harmony export */   validateFileSize: () => (/* binding */ validateFileSize),\n/* harmony export */   validateMagicBytes: () => (/* binding */ validateMagicBytes),\n/* harmony export */   validateMimeType: () => (/* binding */ validateMimeType),\n/* harmony export */   validateUploadedFile: () => (/* binding */ validateUploadedFile)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Server-Side File Validation\n * Validates uploaded files on the server before IPFS upload\n */ \n// Allowed MIME types (must match client-side)\nconst ALLOWED_MIME_TYPES = [\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/gif',\n    'image/webp',\n    'video/mp4',\n    'text/plain',\n    'text/csv',\n    'application/vnd.ms-excel'\n];\n// Max file size (100MB)\nconst MAX_FILE_SIZE = 100 * 1024 * 1024;\n// Magic bytes signatures for server-side validation\nconst MAGIC_BYTES = {\n    'application/pdf': [\n        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([\n            0x25,\n            0x50,\n            0x44,\n            0x46\n        ])\n    ],\n    'image/png': [\n        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([\n            0x89,\n            0x50,\n            0x4E,\n            0x47,\n            0x0D,\n            0x0A,\n            0x1A,\n            0x0A\n        ])\n    ],\n    'image/jpeg': [\n        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([\n            0xFF,\n            0xD8,\n            0xFF,\n            0xE0\n        ]),\n        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([\n            0xFF,\n            0xD8,\n            0xFF,\n            0xE1\n        ]),\n        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([\n            0xFF,\n            0xD8,\n            0xFF,\n            0xE2\n        ])\n    ],\n    'image/gif': [\n        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([\n            0x47,\n            0x49,\n            0x46,\n            0x38,\n            0x37,\n            0x61\n        ]),\n        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([\n            0x47,\n            0x49,\n            0x46,\n            0x38,\n            0x39,\n            0x61\n        ])\n    ],\n    'video/mp4': [\n        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([\n            0x00,\n            0x00,\n            0x00,\n            0x18,\n            0x66,\n            0x74,\n            0x79,\n            0x70\n        ]),\n        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([\n            0x00,\n            0x00,\n            0x00,\n            0x1C,\n            0x66,\n            0x74,\n            0x79,\n            0x70\n        ])\n    ]\n};\n/**\n * Validate file MIME type\n */ function validateMimeType(mimeType) {\n    if (!ALLOWED_MIME_TYPES.includes(mimeType)) {\n        return {\n            valid: false,\n            error: `File type \"${mimeType}\" is not allowed`,\n            errorCode: 'INVALID_TYPE'\n        };\n    }\n    return {\n        valid: true\n    };\n}\n/**\n * Validate file size\n */ function validateFileSize(size, filename) {\n    if (size > MAX_FILE_SIZE) {\n        return {\n            valid: false,\n            error: `File \"${filename}\" exceeds maximum size of ${MAX_FILE_SIZE / 1024 / 1024}MB`,\n            errorCode: 'FILE_TOO_LARGE'\n        };\n    }\n    if (size === 0) {\n        return {\n            valid: false,\n            error: `File \"${filename}\" is empty`,\n            errorCode: 'EMPTY_FILE'\n        };\n    }\n    return {\n        valid: true\n    };\n}\n/**\n * Validate magic bytes from Buffer\n */ function validateMagicBytes(buffer, mimeType, filename) {\n    // Skip validation for text files (no reliable magic bytes)\n    if (mimeType === 'text/plain' || mimeType === 'text/csv' || mimeType === 'application/vnd.ms-excel') {\n        return {\n            valid: true\n        };\n    }\n    const signatures = MAGIC_BYTES[mimeType];\n    if (!signatures) {\n        // No magic bytes defined, skip validation\n        return {\n            valid: true\n        };\n    }\n    // Check if buffer matches any signature\n    const matches = signatures.some((signature)=>{\n        if (buffer.length < signature.length) return false;\n        return buffer.subarray(0, signature.length).equals(signature);\n    });\n    if (!matches) {\n        return {\n            valid: false,\n            error: `File \"${filename}\" content doesn't match declared type \"${mimeType}\"`,\n            errorCode: 'MAGIC_BYTES_MISMATCH'\n        };\n    }\n    return {\n        valid: true\n    };\n}\n/**\n * Comprehensive server-side file validation\n */ function validateUploadedFile(buffer, mimeType, filename) {\n    // 1. Validate MIME type\n    const mimeResult = validateMimeType(mimeType);\n    if (!mimeResult.valid) return mimeResult;\n    // 2. Validate file size\n    const sizeResult = validateFileSize(buffer.length, filename);\n    if (!sizeResult.valid) return sizeResult;\n    // 3. Validate magic bytes\n    const magicResult = validateMagicBytes(buffer, mimeType, filename);\n    if (!magicResult.valid) return magicResult;\n    return {\n        valid: true\n    };\n}\n/**\n * Get file extension from filename\n */ function getFileExtension(filename) {\n    const parts = filename.split('.');\n    return parts.length > 1 ? parts.pop().toLowerCase() : '';\n}\n/**\n * Sanitize filename for storage\n */ function sanitizeFilename(filename) {\n    // Remove or replace unsafe characters\n    return filename.replace(/[^a-zA-Z0-9._-]/g, '_') // Replace unsafe chars with underscore\n    .replace(/_{2,}/g, '_') // Replace multiple underscores with single\n    .substring(0, 255) // Limit length\n    ;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/serverValidation.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/textExtraction.ts":
/*!***********************************!*\
  !*** ./src/lib/textExtraction.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanTextForEmbedding: () => (/* binding */ cleanTextForEmbedding),\n/* harmony export */   extractTextFromFile: () => (/* binding */ extractTextFromFile),\n/* harmony export */   isTextExtractable: () => (/* binding */ isTextExtractable)\n/* harmony export */ });\nconst pdfParse = __webpack_require__(/*! pdf-parse */ \"(rsc)/./node_modules/pdf-parse/dist/pdf-parse/cjs/index.cjs\");\n/**\n * Extract text content from file buffer based on MIME type\n * Only extracts first 2000 chars for search preview\n */ async function extractTextFromFile(buffer, mimeType) {\n    try {\n        // Skip extraction for binary files (images, videos, etc.)\n        // Only index text-based files\n        // Plain text files (CSV, TXT, MD, JSON)\n        if (mimeType === 'text/plain' || mimeType === 'text/csv' || mimeType === 'text/markdown' || mimeType === 'application/json') {\n            // For text files, just grab first 2000 chars\n            return buffer.toString('utf-8').substring(0, 2000);\n        }\n        // PDF files - extract first page worth of text\n        if (mimeType === 'application/pdf') {\n            const data = await pdfParse(buffer, {\n                max: 1\n            }) // Just first page\n            ;\n            return data.text.substring(0, 2000);\n        }\n        // HTML files\n        if (mimeType === 'text/html') {\n            const html = buffer.toString('utf-8');\n            // Basic HTML tag stripping, first 2000 chars\n            return html.replace(/<[^>]*>/g, ' ').replace(/\\s+/g, ' ').trim().substring(0, 2000);\n        }\n        // For other file types (images, videos, etc.), don't extract\n        // Search will work on filename only\n        return null;\n    } catch (error) {\n        console.error('Text extraction error:', error);\n        return null;\n    }\n}\n/**\n * Check if file type supports text extraction\n */ function isTextExtractable(mimeType) {\n    const extractable = [\n        'application/pdf',\n        'text/plain',\n        'text/csv',\n        'text/markdown',\n        'text/html',\n        'application/json'\n    ];\n    return extractable.includes(mimeType);\n}\n/**\n * Clean and normalize extracted text for search indexing\n * Keep it minimal - just enough for search, not full content\n */ function cleanTextForEmbedding(text) {\n    return text.replace(/\\s+/g, ' ') // Normalize whitespace\n    .replace(/[^\\x20-\\x7E\\n]/g, '') // Remove non-printable characters\n    .trim().substring(0, 2000) // Limit to first 2000 chars (~500 words) - just a preview\n    ;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3RleHRFeHRyYWN0aW9uLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE1BQU1BLFdBQVdDLG1CQUFPQSxDQUFDLDhFQUFXO0FBRXBDOzs7Q0FHQyxHQUNNLGVBQWVDLG9CQUNwQkMsTUFBYyxFQUNkQyxRQUFnQjtJQUVoQixJQUFJO1FBQ0YsMERBQTBEO1FBQzFELDhCQUE4QjtRQUU5Qix3Q0FBd0M7UUFDeEMsSUFDRUEsYUFBYSxnQkFDYkEsYUFBYSxjQUNiQSxhQUFhLG1CQUNiQSxhQUFhLG9CQUNiO1lBQ0EsNkNBQTZDO1lBQzdDLE9BQU9ELE9BQU9FLFFBQVEsQ0FBQyxTQUFTQyxTQUFTLENBQUMsR0FBRztRQUMvQztRQUVBLCtDQUErQztRQUMvQyxJQUFJRixhQUFhLG1CQUFtQjtZQUNsQyxNQUFNRyxPQUFPLE1BQU1QLFNBQVNHLFFBQVE7Z0JBQUVLLEtBQUs7WUFBRSxHQUFHLGtCQUFrQjs7WUFDbEUsT0FBT0QsS0FBS0UsSUFBSSxDQUFDSCxTQUFTLENBQUMsR0FBRztRQUNoQztRQUVBLGFBQWE7UUFDYixJQUFJRixhQUFhLGFBQWE7WUFDNUIsTUFBTU0sT0FBT1AsT0FBT0UsUUFBUSxDQUFDO1lBQzdCLDZDQUE2QztZQUM3QyxPQUFPSyxLQUFLQyxPQUFPLENBQUMsWUFBWSxLQUFLQSxPQUFPLENBQUMsUUFBUSxLQUFLQyxJQUFJLEdBQUdOLFNBQVMsQ0FBQyxHQUFHO1FBQ2hGO1FBRUEsNkRBQTZEO1FBQzdELG9DQUFvQztRQUNwQyxPQUFPO0lBQ1QsRUFBRSxPQUFPTyxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQywwQkFBMEJBO1FBQ3hDLE9BQU87SUFDVDtBQUNGO0FBRUE7O0NBRUMsR0FDTSxTQUFTRSxrQkFBa0JYLFFBQWdCO0lBQ2hELE1BQU1ZLGNBQWM7UUFDbEI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFFRCxPQUFPQSxZQUFZQyxRQUFRLENBQUNiO0FBQzlCO0FBRUE7OztDQUdDLEdBQ00sU0FBU2Msc0JBQXNCVCxJQUFZO0lBQ2hELE9BQU9BLEtBQ0pFLE9BQU8sQ0FBQyxRQUFRLEtBQUssdUJBQXVCO0tBQzVDQSxPQUFPLENBQUMsbUJBQW1CLElBQUksa0NBQWtDO0tBQ2pFQyxJQUFJLEdBQ0pOLFNBQVMsQ0FBQyxHQUFHLE1BQU0sMERBQTBEOztBQUNsRiIsInNvdXJjZXMiOlsiL1VzZXJzL2Nocm9ub2RlL0RvY3VtZW50cy96ZXJvLW5vaXNlL3NyYy9saWIvdGV4dEV4dHJhY3Rpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGRmUGFyc2UgPSByZXF1aXJlKCdwZGYtcGFyc2UnKVxuXG4vKipcbiAqIEV4dHJhY3QgdGV4dCBjb250ZW50IGZyb20gZmlsZSBidWZmZXIgYmFzZWQgb24gTUlNRSB0eXBlXG4gKiBPbmx5IGV4dHJhY3RzIGZpcnN0IDIwMDAgY2hhcnMgZm9yIHNlYXJjaCBwcmV2aWV3XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleHRyYWN0VGV4dEZyb21GaWxlKFxuICBidWZmZXI6IEJ1ZmZlcixcbiAgbWltZVR5cGU6IHN0cmluZ1xuKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gIHRyeSB7XG4gICAgLy8gU2tpcCBleHRyYWN0aW9uIGZvciBiaW5hcnkgZmlsZXMgKGltYWdlcywgdmlkZW9zLCBldGMuKVxuICAgIC8vIE9ubHkgaW5kZXggdGV4dC1iYXNlZCBmaWxlc1xuICAgIFxuICAgIC8vIFBsYWluIHRleHQgZmlsZXMgKENTViwgVFhULCBNRCwgSlNPTilcbiAgICBpZiAoXG4gICAgICBtaW1lVHlwZSA9PT0gJ3RleHQvcGxhaW4nIHx8XG4gICAgICBtaW1lVHlwZSA9PT0gJ3RleHQvY3N2JyB8fFxuICAgICAgbWltZVR5cGUgPT09ICd0ZXh0L21hcmtkb3duJyB8fFxuICAgICAgbWltZVR5cGUgPT09ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICkge1xuICAgICAgLy8gRm9yIHRleHQgZmlsZXMsIGp1c3QgZ3JhYiBmaXJzdCAyMDAwIGNoYXJzXG4gICAgICByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKCd1dGYtOCcpLnN1YnN0cmluZygwLCAyMDAwKVxuICAgIH1cbiAgICBcbiAgICAvLyBQREYgZmlsZXMgLSBleHRyYWN0IGZpcnN0IHBhZ2Ugd29ydGggb2YgdGV4dFxuICAgIGlmIChtaW1lVHlwZSA9PT0gJ2FwcGxpY2F0aW9uL3BkZicpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwZGZQYXJzZShidWZmZXIsIHsgbWF4OiAxIH0pIC8vIEp1c3QgZmlyc3QgcGFnZVxuICAgICAgcmV0dXJuIGRhdGEudGV4dC5zdWJzdHJpbmcoMCwgMjAwMClcbiAgICB9XG4gICAgXG4gICAgLy8gSFRNTCBmaWxlc1xuICAgIGlmIChtaW1lVHlwZSA9PT0gJ3RleHQvaHRtbCcpIHtcbiAgICAgIGNvbnN0IGh0bWwgPSBidWZmZXIudG9TdHJpbmcoJ3V0Zi04JylcbiAgICAgIC8vIEJhc2ljIEhUTUwgdGFnIHN0cmlwcGluZywgZmlyc3QgMjAwMCBjaGFyc1xuICAgICAgcmV0dXJuIGh0bWwucmVwbGFjZSgvPFtePl0qPi9nLCAnICcpLnJlcGxhY2UoL1xccysvZywgJyAnKS50cmltKCkuc3Vic3RyaW5nKDAsIDIwMDApXG4gICAgfVxuICAgIFxuICAgIC8vIEZvciBvdGhlciBmaWxlIHR5cGVzIChpbWFnZXMsIHZpZGVvcywgZXRjLiksIGRvbid0IGV4dHJhY3RcbiAgICAvLyBTZWFyY2ggd2lsbCB3b3JrIG9uIGZpbGVuYW1lIG9ubHlcbiAgICByZXR1cm4gbnVsbFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1RleHQgZXh0cmFjdGlvbiBlcnJvcjonLCBlcnJvcilcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgZmlsZSB0eXBlIHN1cHBvcnRzIHRleHQgZXh0cmFjdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNUZXh0RXh0cmFjdGFibGUobWltZVR5cGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCBleHRyYWN0YWJsZSA9IFtcbiAgICAnYXBwbGljYXRpb24vcGRmJyxcbiAgICAndGV4dC9wbGFpbicsXG4gICAgJ3RleHQvY3N2JyxcbiAgICAndGV4dC9tYXJrZG93bicsXG4gICAgJ3RleHQvaHRtbCcsXG4gICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICBdXG4gIFxuICByZXR1cm4gZXh0cmFjdGFibGUuaW5jbHVkZXMobWltZVR5cGUpXG59XG5cbi8qKlxuICogQ2xlYW4gYW5kIG5vcm1hbGl6ZSBleHRyYWN0ZWQgdGV4dCBmb3Igc2VhcmNoIGluZGV4aW5nXG4gKiBLZWVwIGl0IG1pbmltYWwgLSBqdXN0IGVub3VnaCBmb3Igc2VhcmNoLCBub3QgZnVsbCBjb250ZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGVhblRleHRGb3JFbWJlZGRpbmcodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHRleHRcbiAgICAucmVwbGFjZSgvXFxzKy9nLCAnICcpIC8vIE5vcm1hbGl6ZSB3aGl0ZXNwYWNlXG4gICAgLnJlcGxhY2UoL1teXFx4MjAtXFx4N0VcXG5dL2csICcnKSAvLyBSZW1vdmUgbm9uLXByaW50YWJsZSBjaGFyYWN0ZXJzXG4gICAgLnRyaW0oKVxuICAgIC5zdWJzdHJpbmcoMCwgMjAwMCkgLy8gTGltaXQgdG8gZmlyc3QgMjAwMCBjaGFycyAofjUwMCB3b3JkcykgLSBqdXN0IGEgcHJldmlld1xufVxuIl0sIm5hbWVzIjpbInBkZlBhcnNlIiwicmVxdWlyZSIsImV4dHJhY3RUZXh0RnJvbUZpbGUiLCJidWZmZXIiLCJtaW1lVHlwZSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwiZGF0YSIsIm1heCIsInRleHQiLCJodG1sIiwicmVwbGFjZSIsInRyaW0iLCJlcnJvciIsImNvbnNvbGUiLCJpc1RleHRFeHRyYWN0YWJsZSIsImV4dHJhY3RhYmxlIiwiaW5jbHVkZXMiLCJjbGVhblRleHRGb3JFbWJlZGRpbmciXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/textExtraction.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/urlScraper.ts":
/*!*******************************!*\
  !*** ./src/lib/urlScraper.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidUrl: () => (/* binding */ isValidUrl),\n/* harmony export */   scrapeUrl: () => (/* binding */ scrapeUrl),\n/* harmony export */   scrapeUrls: () => (/* binding */ scrapeUrls)\n/* harmony export */ });\n/* harmony import */ var open_graph_scraper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! open-graph-scraper */ \"(rsc)/./node_modules/open-graph-scraper/dist/esm/index.js\");\n/* harmony import */ var open_graph_scraper__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(open_graph_scraper__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var oembed_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! oembed-parser */ \"(rsc)/./node_modules/oembed-parser/src/main.js\");\n\n// @ts-ignore - no proper types for oembed-parser\n\n/**\n * Scrape metadata from a URL using OpenGraph, oEmbed, and fallback methods\n */ async function scrapeUrl(url) {\n    // Normalize URL\n    const normalizedUrl = normalizeUrl(url);\n    // Detect link type\n    const linkType = detectLinkType(normalizedUrl);\n    try {\n        // Try oEmbed first for video platforms (YouTube, Vimeo, etc.)\n        if (linkType === 'video') {\n            try {\n                const oembedData = await (0,oembed_parser__WEBPACK_IMPORTED_MODULE_1__.extract)(normalizedUrl);\n                return {\n                    url: normalizedUrl,\n                    title: oembedData.title,\n                    description: oembedData.description,\n                    imageUrl: oembedData.thumbnail_url,\n                    siteName: oembedData.provider_name,\n                    linkType: 'video'\n                };\n            } catch (err) {\n                console.warn('oEmbed extraction failed, falling back to OpenGraph:', err);\n            }\n        }\n        // Fallback to OpenGraph scraping\n        const { result } = await open_graph_scraper__WEBPACK_IMPORTED_MODULE_0___default()({\n            url: normalizedUrl\n        });\n        return {\n            url: normalizedUrl,\n            title: result.ogTitle || result.twitterTitle,\n            description: result.ogDescription || result.twitterDescription,\n            imageUrl: result.ogImage?.[0]?.url || result.twitterImage?.[0]?.url,\n            siteName: result.ogSiteName,\n            linkType\n        };\n    } catch (error) {\n        console.error('URL scraping failed:', error);\n        // Return minimal metadata if scraping fails\n        return {\n            url: normalizedUrl,\n            title: extractTitleFromUrl(normalizedUrl),\n            linkType\n        };\n    }\n}\n/**\n * Scrape multiple URLs in parallel\n */ async function scrapeUrls(urls) {\n    const results = await Promise.allSettled(urls.map((url)=>scrapeUrl(url)));\n    return results.filter((result)=>result.status === 'fulfilled').map((result)=>result.value);\n}\n/**\n * Normalize URL (add protocol if missing, trim whitespace)\n */ function normalizeUrl(url) {\n    let normalized = url.trim();\n    // Add https:// if no protocol\n    if (!normalized.match(/^https?:\\/\\//i)) {\n        normalized = `https://${normalized}`;\n    }\n    return normalized;\n}\n/**\n * Detect link type based on URL patterns\n */ function detectLinkType(url) {\n    const urlLower = url.toLowerCase();\n    // Video platforms\n    if (urlLower.includes('youtube.com') || urlLower.includes('youtu.be') || urlLower.includes('vimeo.com') || urlLower.includes('dailymotion.com') || urlLower.includes('twitch.tv')) {\n        return 'video';\n    }\n    // Social media\n    if (urlLower.includes('twitter.com') || urlLower.includes('x.com') || urlLower.includes('facebook.com') || urlLower.includes('instagram.com') || urlLower.includes('linkedin.com') || urlLower.includes('reddit.com')) {\n        return 'social';\n    }\n    // News/blog domains (common patterns)\n    if (urlLower.includes('medium.com') || urlLower.includes('substack.com') || urlLower.includes('blog.') || urlLower.includes('/article/') || urlLower.includes('/post/')) {\n        return 'article';\n    }\n    return 'generic';\n}\n/**\n * Extract a basic title from URL if scraping fails\n */ function extractTitleFromUrl(url) {\n    try {\n        const urlObj = new URL(url);\n        const pathname = urlObj.pathname;\n        // Get last path segment\n        const segments = pathname.split('/').filter(Boolean);\n        const lastSegment = segments[segments.length - 1] || urlObj.hostname;\n        // Clean up (remove file extension, replace dashes/underscores with spaces)\n        return lastSegment.replace(/\\.[^.]+$/, '') // Remove extension\n        .replace(/[-_]/g, ' ').replace(/\\b\\w/g, (c)=>c.toUpperCase()) // Title case\n        ;\n    } catch  {\n        return url;\n    }\n}\n/**\n * Validate URL format\n */ function isValidUrl(url) {\n    try {\n        const normalized = normalizeUrl(url);\n        new URL(normalized);\n        return true;\n    } catch  {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/urlScraper.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "node:assert":
/*!******************************!*\
  !*** external "node:assert" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:assert");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:buffer");

/***/ }),

/***/ "node:console":
/*!*******************************!*\
  !*** external "node:console" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:console");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "node:diagnostics_channel":
/*!*******************************************!*\
  !*** external "node:diagnostics_channel" ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:diagnostics_channel");

/***/ }),

/***/ "node:dns":
/*!***************************!*\
  !*** external "node:dns" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:dns");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ "node:fs/promises":
/*!***********************************!*\
  !*** external "node:fs/promises" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs/promises");

/***/ }),

/***/ "node:http":
/*!****************************!*\
  !*** external "node:http" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:http");

/***/ }),

/***/ "node:http2":
/*!*****************************!*\
  !*** external "node:http2" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:http2");

/***/ }),

/***/ "node:net":
/*!***************************!*\
  !*** external "node:net" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:net");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:path");

/***/ }),

/***/ "node:perf_hooks":
/*!**********************************!*\
  !*** external "node:perf_hooks" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:perf_hooks");

/***/ }),

/***/ "node:querystring":
/*!***********************************!*\
  !*** external "node:querystring" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:querystring");

/***/ }),

/***/ "node:sqlite":
/*!******************************!*\
  !*** external "node:sqlite" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:sqlite");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:timers":
/*!******************************!*\
  !*** external "node:timers" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:timers");

/***/ }),

/***/ "node:tls":
/*!***************************!*\
  !*** external "node:tls" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:tls");

/***/ }),

/***/ "node:url":
/*!***************************!*\
  !*** external "node:url" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:url");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ "node:util/types":
/*!**********************************!*\
  !*** external "node:util/types" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util/types");

/***/ }),

/***/ "node:worker_threads":
/*!**************************************!*\
  !*** external "node:worker_threads" ***!
  \**************************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:worker_threads");

/***/ }),

/***/ "node:zlib":
/*!****************************!*\
  !*** external "node:zlib" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:zlib");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/mime-db","vendor-chunks/axios","vendor-chunks/follow-redirects","vendor-chunks/debug","vendor-chunks/form-data","vendor-chunks/get-intrinsic","vendor-chunks/asynckit","vendor-chunks/combined-stream","vendor-chunks/mime-types","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/supports-color","vendor-chunks/has-symbols","vendor-chunks/delayed-stream","vendor-chunks/function-bind","vendor-chunks/es-set-tostringtag","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/has-flag","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/open-graph-scraper","vendor-chunks/undici","vendor-chunks/iconv-lite","vendor-chunks/parse5","vendor-chunks/cheerio","vendor-chunks/css-select","vendor-chunks/chardet","vendor-chunks/entities","vendor-chunks/domutils","vendor-chunks/htmlparser2","vendor-chunks/oembed-parser","vendor-chunks/whatwg-url","vendor-chunks/whatwg-mimetype","vendor-chunks/css-what","vendor-chunks/whatwg-encoding","vendor-chunks/nth-check","vendor-chunks/cheerio-select","vendor-chunks/encoding-sniffer","vendor-chunks/tr46","vendor-chunks/domhandler","vendor-chunks/dom-serializer","vendor-chunks/node-fetch","vendor-chunks/pdf-parse","vendor-chunks/parse5-parser-stream","vendor-chunks/parse5-htmlparser2-tree-adapter","vendor-chunks/webidl-conversions","vendor-chunks/safer-buffer","vendor-chunks/domelementtype","vendor-chunks/cross-fetch","vendor-chunks/boolbase"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fupload%2Froute&page=%2Fapi%2Fupload%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload%2Froute.ts&appDir=%2FUsers%2Fchronode%2FDocuments%2Fzero-noise%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fchronode%2FDocuments%2Fzero-noise&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();
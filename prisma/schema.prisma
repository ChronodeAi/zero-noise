// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  emailVerified DateTime?
  name          String?
  image         String?      // OAuth profile picture
  provider      String       @default("credentials") // "google", "credentials"
  providerId    String?      // OAuth provider user ID
  passwordHash  String?      // For credentials provider (bcrypt)
  isWhitelisted Boolean      @default(false)
  isAdmin       Boolean      @default(false)
  xp            Int          @default(0)
  createdAt     DateTime     @default(now())
  lastLoginAt   DateTime?
  
  // Relations
  files         File[]
  links         Link[]
  collections   Collection[]
  inviteCodeId  String?
  inviteCode    InviteCode?  @relation(fields: [inviteCodeId], references: [id])
  accounts      Account[]
  sessions      Session[]
  
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
 
  @@unique([identifier, token])
}

model InviteCode {
  id         String    @id @default(uuid())
  code       String    @unique
  createdBy  String
  expiresAt  DateTime
  claimedBy  String?
  claimedAt  DateTime?
  createdAt  DateTime  @default(now())
  users      User[]
  
  @@index([code])
}

model Collection {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  files     File[]
  links     Link[]
  
  // Attribution
  createdBy String?
  creator   User?    @relation(fields: [createdBy], references: [id])
  
  @@index([createdBy])
}

model File {
  id           String     @id @default(uuid())
  cid          String     @unique
  filename     String
  size         Int
  mimeType     String
  uploadedAt   DateTime   @default(now())
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])
  
  // Full-text search fields
  textContent  String?    @db.Text
  indexed      Boolean    @default(false)
  indexedAt    DateTime?
  
  // Attribution
  uploadedBy   String?
  uploader     User?      @relation(fields: [uploadedBy], references: [id])
  
  @@index([collectionId])
  @@index([cid])
  @@index([uploadedBy])
}

model Link {
  id             String     @id @default(uuid())
  url            String
  title          String?
  description    String?    @db.Text
  imageUrl       String?
  siteName       String?
  author         String?    // Channel name for YouTube, username for Twitter, etc.
  linkType       String     // "article", "video", "social", "generic"
  structuredData Json?      // Schema.org structured data (JSON-LD, Microdata)
  createdAt      DateTime   @default(now())
  collectionId   String
  collection     Collection @relation(fields: [collectionId], references: [id])

  // Attribution
  uploadedBy     String?
  uploader       User?      @relation(fields: [uploadedBy], references: [id])

  @@index([collectionId])
  @@index([url])
  @@index([uploadedBy])
}
